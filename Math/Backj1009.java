package test;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Backj1009 {

	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int t = Integer.parseInt(br.readLine());
		for(int repeat = 0 ; repeat < t ; repeat++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			int a = Integer.parseInt(st.nextToken());
			int b = Integer.parseInt(st.nextToken());
			//컴퓨터는 10개 - a가 몇이건 간에 10을 초과할순 없다.
			a = a%10;
			if(a == 0) a = 10;
			/*
			방법1: a%10 을 b만큼 곱한후 1의자리수를 나타내는 방법. b가 10만까지 이기에 느리다. 
			int temp = 1;
			for(int i = 1 ; i <= b ; i++) {
				temp = temp*a;
				temp %= 10;
			}
			if(temp == 0) temp = 10;
			System.out.print(temp + " / ");
			*/
			//방법2 : 값이 반복되는 수만큼 b도 나머지값으로 만든다. - 방법 1에 비해 속도가 1/10 정도로 줄었다.
			//백준기준 방법1: 1448ms / 방법2: 188ms
			int[] bb = new int[11];
			bb[0] = 1;
			int limit = 0;
			for(int i = 1 ; i < 11 ; i++) {
				int next = bb[i-1] * a;
				next = next % 10;
				if(next == 0) next = 10;
				bb[i] = next;
				if(bb[i] == bb[1] && i != 1) {
					limit = i-1;
					break;
				}
				if(i == 10) {
					limit = 10;
				}
			}
			int tt = b%limit;
			if(tt == 0) tt = limit;
			System.out.println(bb[tt]);
			
		}
		br.close();
	}

}

/*
문제
재용이는 최신 컴퓨터 10대를 가지고 있다.
어느 날 재용이는 많은 데이터를 처리해야 될 일이 생겨서 각 컴퓨터에 1번부터 10번까지의 번호를 부여하고,
10대의 컴퓨터가 다음과 같은 방법으로 데이터들을 처리하기로 하였다.

1번 데이터는 1번 컴퓨터, 2번 데이터는 2번 컴퓨터, 3번 데이터는 3번 컴퓨터, ... ,
10번 데이터는 10번 컴퓨터, 11번 데이터는 1번 컴퓨터, 12번 데이터는 2번 컴퓨터, ...

총 데이터의 개수는 항상 a^b개의 형태로 주어진다.
재용이는 문득 마지막 데이터가 처리될 컴퓨터의 번호가 궁금해졌다. 이를 수행해주는 프로그램을 작성하라.

입력
입력의 첫 줄에는 테스트 케이스의 개수 T가 주어진다.
그 다음 줄부터 각각의 테스트 케이스에 대해 정수 a와 b가 주어진다. (1 ≤ a < 100, 1 ≤ b < 1,000,000)

출력
각 테스트 케이스에 대해 마지막 데이터가 처리되는 컴퓨터의 번호를 출력한다.

예제입력 1
6
1 6
3 7
6 2
7 100
9 635
10 15

예제출력 1
1
7
6
1
9
10
*/